// Generated from src/grammars/ext/Latte.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_variables)]
use antlr_rust::atn::ATN;
use antlr_rust::char_stream::CharStream;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::dfa::DFA;
use antlr_rust::lexer_atn_simulator::{LexerATNSimulator, ILexerATNSimulator};
use antlr_rust::PredictionContextCache;
use antlr_rust::recognizer::{Recognizer,Actions};
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::TokenSource;
use antlr_rust::token_factory::{TokenFactory,CommonTokenFactory,TokenAware};
use antlr_rust::token::*;
use antlr_rust::rule_context::{BaseRuleContext,EmptyCustomRuleContext,EmptyContext};
use antlr_rust::parser_rule_context::{ParserRuleContext,BaseParserRuleContext,cast};
use antlr_rust::vocabulary::{Vocabulary,VocabularyImpl};

use antlr_rust::{lazy_static,Tid,TidAble,TidExt};

use std::sync::Arc;
use std::cell::RefCell;
use std::rc::Rc;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};


	pub const T__0:isize=1; 
	pub const T__1:isize=2; 
	pub const T__2:isize=3; 
	pub const T__3:isize=4; 
	pub const T__4:isize=5; 
	pub const T__5:isize=6; 
	pub const T__6:isize=7; 
	pub const T__7:isize=8; 
	pub const T__8:isize=9; 
	pub const T__9:isize=10; 
	pub const T__10:isize=11; 
	pub const T__11:isize=12; 
	pub const T__12:isize=13; 
	pub const T__13:isize=14; 
	pub const T__14:isize=15; 
	pub const T__15:isize=16; 
	pub const T__16:isize=17; 
	pub const T__17:isize=18; 
	pub const T__18:isize=19; 
	pub const T__19:isize=20; 
	pub const T__20:isize=21; 
	pub const T__21:isize=22; 
	pub const T__22:isize=23; 
	pub const T__23:isize=24; 
	pub const T__24:isize=25; 
	pub const T__25:isize=26; 
	pub const T__26:isize=27; 
	pub const T__27:isize=28; 
	pub const T__28:isize=29; 
	pub const T__29:isize=30; 
	pub const T__30:isize=31; 
	pub const T__31:isize=32; 
	pub const T__32:isize=33; 
	pub const T__33:isize=34; 
	pub const T__34:isize=35; 
	pub const T__35:isize=36; 
	pub const T__36:isize=37; 
	pub const T__37:isize=38; 
	pub const T__38:isize=39; 
	pub const T__39:isize=40; 
	pub const T__40:isize=41; 
	pub const T__41:isize=42; 
	pub const T__42:isize=43; 
	pub const COMMENT:isize=44; 
	pub const MULTICOMMENT:isize=45; 
	pub const INT:isize=46; 
	pub const ID:isize=47; 
	pub const WS:isize=48; 
	pub const STR:isize=49;
	pub const channelNames: [&'static str;0+2] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	];

	pub const modeNames: [&'static str;1] = [
		"DEFAULT_MODE"
	];

	pub const ruleNames: [&'static str;56] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42", "COMMENT", "MULTICOMMENT", "Letter", "Capital", "Small", 
		"Digit", "INT", "ID_First", "ID", "WS", "STR", "StringCharacters", "StringCharacter"
	];


	pub const _LITERAL_NAMES: [Option<&'static str>;44] = [
		None, Some("'class'"), Some("'extends'"), Some("'('"), Some("')'"), Some("','"), 
		Some("'{'"), Some("'}'"), Some("';'"), Some("'='"), Some("'++'"), Some("'--'"), 
		Some("'return'"), Some("'if'"), Some("'else'"), Some("'while'"), Some("'for'"), 
		Some("':'"), Some("'.'"), Some("'['"), Some("']'"), Some("'void'"), Some("'int'"), 
		Some("'[]'"), Some("'string'"), Some("'boolean'"), Some("'-'"), Some("'!'"), 
		Some("'&&'"), Some("'||'"), Some("'true'"), Some("'false'"), Some("'null'"), 
		Some("'new'"), Some("'+'"), Some("'*'"), Some("'/'"), Some("'%'"), Some("'<'"), 
		Some("'<='"), Some("'>'"), Some("'>='"), Some("'=='"), Some("'!='")
	];
	pub const _SYMBOLIC_NAMES: [Option<&'static str>;50]  = [
		None, None, None, None, None, None, None, None, None, None, None, None, 
		None, None, None, None, None, None, None, None, None, None, None, None, 
		None, None, None, None, None, None, None, None, None, None, None, None, 
		None, None, None, None, None, None, None, None, Some("COMMENT"), Some("MULTICOMMENT"), 
		Some("INT"), Some("ID"), Some("WS"), Some("STR")
	];
	lazy_static!{
	    static ref _shared_context_cache: Arc<PredictionContextCache> = Arc::new(PredictionContextCache::new());
		static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(_LITERAL_NAMES.iter(), _SYMBOLIC_NAMES.iter(), None));
	}


pub type LexerContext<'input> = BaseRuleContext<'input,EmptyCustomRuleContext<'input,LocalTokenFactory<'input> >>;
pub type LocalTokenFactory<'input> = CommonTokenFactory;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a> >::From;

pub struct LatteLexer<'input, Input:CharStream<From<'input> >> {
	base: BaseLexer<'input,LatteLexerActions,Input,LocalTokenFactory<'input>>,
}

antlr_rust::tid! { impl<'input,Input> TidAble<'input> for LatteLexer<'input,Input> where Input:CharStream<From<'input> > }

impl<'input, Input:CharStream<From<'input> >> Deref for LatteLexer<'input,Input>{
	type Target = BaseLexer<'input,LatteLexerActions,Input,LocalTokenFactory<'input>>;

	fn deref(&self) -> &Self::Target {
		&self.base
	}
}

impl<'input, Input:CharStream<From<'input> >> DerefMut for LatteLexer<'input,Input>{
	fn deref_mut(&mut self) -> &mut Self::Target {
		&mut self.base
	}
}


impl<'input, Input:CharStream<From<'input> >> LatteLexer<'input,Input>{
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "LatteLexer.g4"
    }

	pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
		antlr_rust::recognizer::check_version("0","3");
    	Self {
			base: BaseLexer::new_base_lexer(
				input,
				LexerATNSimulator::new_lexer_atnsimulator(
					_ATN.clone(),
					_decision_to_DFA.clone(),
					_shared_context_cache.clone(),
				),
				LatteLexerActions{},
				tf
			)
	    }
	}
}

impl<'input, Input:CharStream<From<'input> >> LatteLexer<'input,Input> where &'input LocalTokenFactory<'input>:Default{
	pub fn new(input: Input) -> Self{
		LatteLexer::new_with_token_factory(input, <&LocalTokenFactory<'input> as Default>::default())
	}
}

pub struct LatteLexerActions {
}

impl LatteLexerActions{
}

impl<'input, Input:CharStream<From<'input> >> Actions<'input,BaseLexer<'input,LatteLexerActions,Input,LocalTokenFactory<'input>>> for LatteLexerActions{
	}

	impl<'input, Input:CharStream<From<'input> >> LatteLexer<'input,Input>{

}

impl<'input, Input:CharStream<From<'input> >> LexerRecog<'input,BaseLexer<'input,LatteLexerActions,Input,LocalTokenFactory<'input>>> for LatteLexerActions{
}
impl<'input> TokenAware<'input> for LatteLexerActions{
	type TF = LocalTokenFactory<'input>;
}

impl<'input, Input:CharStream<From<'input> >> TokenSource<'input> for LatteLexer<'input,Input>{
	type TF = LocalTokenFactory<'input>;

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

	fn get_source_name(&self) -> String {
		self.base.get_source_name()
	}

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}



	lazy_static! {
	    static ref _ATN: Arc<ATN> =
	        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
	    static ref _decision_to_DFA: Arc<Vec<antlr_rust::RwLock<DFA>>> = {
	        let mut dfa = Vec::new();
	        let size = _ATN.decision_to_state.len();
	        for i in 0..size {
	            dfa.push(DFA::new(
	                _ATN.clone(),
	                _ATN.get_decision_state(i),
	                i as isize,
	            ).into())
	        }
	        Arc::new(dfa)
	    };
	}



	const _serializedATN:&'static str =
		"\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x33\u{15b}\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\x04\x04\
		\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\x09\x09\
		\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\x0d\x04\
		\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\x12\x09\
		\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\x16\x04\
		\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\x1b\x09\
		\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\x1f\x04\
		\x20\x09\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x04\x24\x09\
		\x24\x04\x25\x09\x25\x04\x26\x09\x26\x04\x27\x09\x27\x04\x28\x09\x28\x04\
		\x29\x09\x29\x04\x2a\x09\x2a\x04\x2b\x09\x2b\x04\x2c\x09\x2c\x04\x2d\x09\
		\x2d\x04\x2e\x09\x2e\x04\x2f\x09\x2f\x04\x30\x09\x30\x04\x31\x09\x31\x04\
		\x32\x09\x32\x04\x33\x09\x33\x04\x34\x09\x34\x04\x35\x09\x35\x04\x36\x09\
		\x36\x04\x37\x09\x37\x04\x38\x09\x38\x04\x39\x09\x39\x03\x02\x03\x02\x03\
		\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\
		\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\
		\x07\x03\x07\x03\x08\x03\x08\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\x0b\x03\
		\x0b\x03\x0b\x03\x0c\x03\x0c\x03\x0c\x03\x0d\x03\x0d\x03\x0d\x03\x0d\x03\
		\x0d\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x03\x0f\x03\
		\x0f\x03\x0f\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\
		\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\
		\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\
		\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\
		\x19\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\
		\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x03\x1d\x03\
		\x1e\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x20\x03\
		\x20\x03\x20\x03\x20\x03\x20\x03\x20\x03\x21\x03\x21\x03\x21\x03\x21\x03\
		\x21\x03\x22\x03\x22\x03\x22\x03\x22\x03\x23\x03\x23\x03\x24\x03\x24\x03\
		\x25\x03\x25\x03\x26\x03\x26\x03\x27\x03\x27\x03\x28\x03\x28\x03\x28\x03\
		\x29\x03\x29\x03\x2a\x03\x2a\x03\x2a\x03\x2b\x03\x2b\x03\x2b\x03\x2c\x03\
		\x2c\x03\x2c\x03\x2d\x03\x2d\x07\x2d\u{10a}\x0a\x2d\x0c\x2d\x0e\x2d\u{10d}\
		\x0b\x2d\x03\x2d\x03\x2d\x03\x2d\x03\x2d\x07\x2d\u{113}\x0a\x2d\x0c\x2d\
		\x0e\x2d\u{116}\x0b\x2d\x05\x2d\u{118}\x0a\x2d\x03\x2d\x03\x2d\x03\x2e\
		\x03\x2e\x03\x2e\x03\x2e\x07\x2e\u{120}\x0a\x2e\x0c\x2e\x0e\x2e\u{123}\
		\x0b\x2e\x03\x2e\x03\x2e\x03\x2e\x03\x2e\x03\x2e\x03\x2f\x03\x2f\x05\x2f\
		\u{12c}\x0a\x2f\x03\x30\x03\x30\x03\x31\x03\x31\x03\x32\x03\x32\x03\x33\
		\x06\x33\u{135}\x0a\x33\x0d\x33\x0e\x33\u{136}\x03\x34\x03\x34\x05\x34\
		\u{13b}\x0a\x34\x03\x35\x03\x35\x03\x35\x07\x35\u{140}\x0a\x35\x0c\x35\
		\x0e\x35\u{143}\x0b\x35\x03\x36\x06\x36\u{146}\x0a\x36\x0d\x36\x0e\x36\
		\u{147}\x03\x36\x03\x36\x03\x37\x03\x37\x05\x37\u{14e}\x0a\x37\x03\x37\
		\x03\x37\x03\x38\x06\x38\u{153}\x0a\x38\x0d\x38\x0e\x38\u{154}\x03\x39\
		\x03\x39\x03\x39\x05\x39\u{15a}\x0a\x39\x03\u{121}\x02\x3a\x03\x03\x05\
		\x04\x07\x05\x09\x06\x0b\x07\x0d\x08\x0f\x09\x11\x0a\x13\x0b\x15\x0c\x17\
		\x0d\x19\x0e\x1b\x0f\x1d\x10\x1f\x11\x21\x12\x23\x13\x25\x14\x27\x15\x29\
		\x16\x2b\x17\x2d\x18\x2f\x19\x31\x1a\x33\x1b\x35\x1c\x37\x1d\x39\x1e\x3b\
		\x1f\x3d\x20\x3f\x21\x41\x22\x43\x23\x45\x24\x47\x25\x49\x26\x4b\x27\x4d\
		\x28\x4f\x29\x51\x2a\x53\x2b\x55\x2c\x57\x2d\x59\x2e\x5b\x2f\x5d\x02\x5f\
		\x02\x61\x02\x63\x02\x65\x30\x67\x02\x69\x31\x6b\x32\x6d\x33\x6f\x02\x71\
		\x02\x03\x02\x09\x05\x02\x0c\x0c\x0f\x0f\x41\x41\x05\x02\x43\x5c\u{c2}\
		\u{d8}\u{da}\u{e0}\x05\x02\x63\x7c\u{e1}\u{f8}\u{fa}\u{101}\x03\x02\x32\
		\x3b\x05\x02\x0b\x0c\x0f\x0f\x22\x22\x04\x02\x24\x24\x5e\x5e\x07\x02\x24\
		\x24\x5e\x5e\x70\x70\x74\x74\x76\x76\x02\u{160}\x02\x03\x03\x02\x02\x02\
		\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\x09\x03\x02\x02\x02\
		\x02\x0b\x03\x02\x02\x02\x02\x0d\x03\x02\x02\x02\x02\x0f\x03\x02\x02\x02\
		\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\
		\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1b\x03\x02\x02\x02\
		\x02\x1d\x03\x02\x02\x02\x02\x1f\x03\x02\x02\x02\x02\x21\x03\x02\x02\x02\
		\x02\x23\x03\x02\x02\x02\x02\x25\x03\x02\x02\x02\x02\x27\x03\x02\x02\x02\
		\x02\x29\x03\x02\x02\x02\x02\x2b\x03\x02\x02\x02\x02\x2d\x03\x02\x02\x02\
		\x02\x2f\x03\x02\x02\x02\x02\x31\x03\x02\x02\x02\x02\x33\x03\x02\x02\x02\
		\x02\x35\x03\x02\x02\x02\x02\x37\x03\x02\x02\x02\x02\x39\x03\x02\x02\x02\
		\x02\x3b\x03\x02\x02\x02\x02\x3d\x03\x02\x02\x02\x02\x3f\x03\x02\x02\x02\
		\x02\x41\x03\x02\x02\x02\x02\x43\x03\x02\x02\x02\x02\x45\x03\x02\x02\x02\
		\x02\x47\x03\x02\x02\x02\x02\x49\x03\x02\x02\x02\x02\x4b\x03\x02\x02\x02\
		\x02\x4d\x03\x02\x02\x02\x02\x4f\x03\x02\x02\x02\x02\x51\x03\x02\x02\x02\
		\x02\x53\x03\x02\x02\x02\x02\x55\x03\x02\x02\x02\x02\x57\x03\x02\x02\x02\
		\x02\x59\x03\x02\x02\x02\x02\x5b\x03\x02\x02\x02\x02\x65\x03\x02\x02\x02\
		\x02\x69\x03\x02\x02\x02\x02\x6b\x03\x02\x02\x02\x02\x6d\x03\x02\x02\x02\
		\x03\x73\x03\x02\x02\x02\x05\x79\x03\x02\x02\x02\x07\u{81}\x03\x02\x02\
		\x02\x09\u{83}\x03\x02\x02\x02\x0b\u{85}\x03\x02\x02\x02\x0d\u{87}\x03\
		\x02\x02\x02\x0f\u{89}\x03\x02\x02\x02\x11\u{8b}\x03\x02\x02\x02\x13\u{8d}\
		\x03\x02\x02\x02\x15\u{8f}\x03\x02\x02\x02\x17\u{92}\x03\x02\x02\x02\x19\
		\u{95}\x03\x02\x02\x02\x1b\u{9c}\x03\x02\x02\x02\x1d\u{9f}\x03\x02\x02\
		\x02\x1f\u{a4}\x03\x02\x02\x02\x21\u{aa}\x03\x02\x02\x02\x23\u{ae}\x03\
		\x02\x02\x02\x25\u{b0}\x03\x02\x02\x02\x27\u{b2}\x03\x02\x02\x02\x29\u{b4}\
		\x03\x02\x02\x02\x2b\u{b6}\x03\x02\x02\x02\x2d\u{bb}\x03\x02\x02\x02\x2f\
		\u{bf}\x03\x02\x02\x02\x31\u{c2}\x03\x02\x02\x02\x33\u{c9}\x03\x02\x02\
		\x02\x35\u{d1}\x03\x02\x02\x02\x37\u{d3}\x03\x02\x02\x02\x39\u{d5}\x03\
		\x02\x02\x02\x3b\u{d8}\x03\x02\x02\x02\x3d\u{db}\x03\x02\x02\x02\x3f\u{e0}\
		\x03\x02\x02\x02\x41\u{e6}\x03\x02\x02\x02\x43\u{eb}\x03\x02\x02\x02\x45\
		\u{ef}\x03\x02\x02\x02\x47\u{f1}\x03\x02\x02\x02\x49\u{f3}\x03\x02\x02\
		\x02\x4b\u{f5}\x03\x02\x02\x02\x4d\u{f7}\x03\x02\x02\x02\x4f\u{f9}\x03\
		\x02\x02\x02\x51\u{fc}\x03\x02\x02\x02\x53\u{fe}\x03\x02\x02\x02\x55\u{101}\
		\x03\x02\x02\x02\x57\u{104}\x03\x02\x02\x02\x59\u{117}\x03\x02\x02\x02\
		\x5b\u{11b}\x03\x02\x02\x02\x5d\u{12b}\x03\x02\x02\x02\x5f\u{12d}\x03\x02\
		\x02\x02\x61\u{12f}\x03\x02\x02\x02\x63\u{131}\x03\x02\x02\x02\x65\u{134}\
		\x03\x02\x02\x02\x67\u{13a}\x03\x02\x02\x02\x69\u{13c}\x03\x02\x02\x02\
		\x6b\u{145}\x03\x02\x02\x02\x6d\u{14b}\x03\x02\x02\x02\x6f\u{152}\x03\x02\
		\x02\x02\x71\u{159}\x03\x02\x02\x02\x73\x74\x07\x65\x02\x02\x74\x75\x07\
		\x6e\x02\x02\x75\x76\x07\x63\x02\x02\x76\x77\x07\x75\x02\x02\x77\x78\x07\
		\x75\x02\x02\x78\x04\x03\x02\x02\x02\x79\x7a\x07\x67\x02\x02\x7a\x7b\x07\
		\x7a\x02\x02\x7b\x7c\x07\x76\x02\x02\x7c\x7d\x07\x67\x02\x02\x7d\x7e\x07\
		\x70\x02\x02\x7e\x7f\x07\x66\x02\x02\x7f\u{80}\x07\x75\x02\x02\u{80}\x06\
		\x03\x02\x02\x02\u{81}\u{82}\x07\x2a\x02\x02\u{82}\x08\x03\x02\x02\x02\
		\u{83}\u{84}\x07\x2b\x02\x02\u{84}\x0a\x03\x02\x02\x02\u{85}\u{86}\x07\
		\x2e\x02\x02\u{86}\x0c\x03\x02\x02\x02\u{87}\u{88}\x07\x7d\x02\x02\u{88}\
		\x0e\x03\x02\x02\x02\u{89}\u{8a}\x07\x7f\x02\x02\u{8a}\x10\x03\x02\x02\
		\x02\u{8b}\u{8c}\x07\x3d\x02\x02\u{8c}\x12\x03\x02\x02\x02\u{8d}\u{8e}\
		\x07\x3f\x02\x02\u{8e}\x14\x03\x02\x02\x02\u{8f}\u{90}\x07\x2d\x02\x02\
		\u{90}\u{91}\x07\x2d\x02\x02\u{91}\x16\x03\x02\x02\x02\u{92}\u{93}\x07\
		\x2f\x02\x02\u{93}\u{94}\x07\x2f\x02\x02\u{94}\x18\x03\x02\x02\x02\u{95}\
		\u{96}\x07\x74\x02\x02\u{96}\u{97}\x07\x67\x02\x02\u{97}\u{98}\x07\x76\
		\x02\x02\u{98}\u{99}\x07\x77\x02\x02\u{99}\u{9a}\x07\x74\x02\x02\u{9a}\
		\u{9b}\x07\x70\x02\x02\u{9b}\x1a\x03\x02\x02\x02\u{9c}\u{9d}\x07\x6b\x02\
		\x02\u{9d}\u{9e}\x07\x68\x02\x02\u{9e}\x1c\x03\x02\x02\x02\u{9f}\u{a0}\
		\x07\x67\x02\x02\u{a0}\u{a1}\x07\x6e\x02\x02\u{a1}\u{a2}\x07\x75\x02\x02\
		\u{a2}\u{a3}\x07\x67\x02\x02\u{a3}\x1e\x03\x02\x02\x02\u{a4}\u{a5}\x07\
		\x79\x02\x02\u{a5}\u{a6}\x07\x6a\x02\x02\u{a6}\u{a7}\x07\x6b\x02\x02\u{a7}\
		\u{a8}\x07\x6e\x02\x02\u{a8}\u{a9}\x07\x67\x02\x02\u{a9}\x20\x03\x02\x02\
		\x02\u{aa}\u{ab}\x07\x68\x02\x02\u{ab}\u{ac}\x07\x71\x02\x02\u{ac}\u{ad}\
		\x07\x74\x02\x02\u{ad}\x22\x03\x02\x02\x02\u{ae}\u{af}\x07\x3c\x02\x02\
		\u{af}\x24\x03\x02\x02\x02\u{b0}\u{b1}\x07\x30\x02\x02\u{b1}\x26\x03\x02\
		\x02\x02\u{b2}\u{b3}\x07\x5d\x02\x02\u{b3}\x28\x03\x02\x02\x02\u{b4}\u{b5}\
		\x07\x5f\x02\x02\u{b5}\x2a\x03\x02\x02\x02\u{b6}\u{b7}\x07\x78\x02\x02\
		\u{b7}\u{b8}\x07\x71\x02\x02\u{b8}\u{b9}\x07\x6b\x02\x02\u{b9}\u{ba}\x07\
		\x66\x02\x02\u{ba}\x2c\x03\x02\x02\x02\u{bb}\u{bc}\x07\x6b\x02\x02\u{bc}\
		\u{bd}\x07\x70\x02\x02\u{bd}\u{be}\x07\x76\x02\x02\u{be}\x2e\x03\x02\x02\
		\x02\u{bf}\u{c0}\x07\x5d\x02\x02\u{c0}\u{c1}\x07\x5f\x02\x02\u{c1}\x30\
		\x03\x02\x02\x02\u{c2}\u{c3}\x07\x75\x02\x02\u{c3}\u{c4}\x07\x76\x02\x02\
		\u{c4}\u{c5}\x07\x74\x02\x02\u{c5}\u{c6}\x07\x6b\x02\x02\u{c6}\u{c7}\x07\
		\x70\x02\x02\u{c7}\u{c8}\x07\x69\x02\x02\u{c8}\x32\x03\x02\x02\x02\u{c9}\
		\u{ca}\x07\x64\x02\x02\u{ca}\u{cb}\x07\x71\x02\x02\u{cb}\u{cc}\x07\x71\
		\x02\x02\u{cc}\u{cd}\x07\x6e\x02\x02\u{cd}\u{ce}\x07\x67\x02\x02\u{ce}\
		\u{cf}\x07\x63\x02\x02\u{cf}\u{d0}\x07\x70\x02\x02\u{d0}\x34\x03\x02\x02\
		\x02\u{d1}\u{d2}\x07\x2f\x02\x02\u{d2}\x36\x03\x02\x02\x02\u{d3}\u{d4}\
		\x07\x23\x02\x02\u{d4}\x38\x03\x02\x02\x02\u{d5}\u{d6}\x07\x28\x02\x02\
		\u{d6}\u{d7}\x07\x28\x02\x02\u{d7}\x3a\x03\x02\x02\x02\u{d8}\u{d9}\x07\
		\x7e\x02\x02\u{d9}\u{da}\x07\x7e\x02\x02\u{da}\x3c\x03\x02\x02\x02\u{db}\
		\u{dc}\x07\x76\x02\x02\u{dc}\u{dd}\x07\x74\x02\x02\u{dd}\u{de}\x07\x77\
		\x02\x02\u{de}\u{df}\x07\x67\x02\x02\u{df}\x3e\x03\x02\x02\x02\u{e0}\u{e1}\
		\x07\x68\x02\x02\u{e1}\u{e2}\x07\x63\x02\x02\u{e2}\u{e3}\x07\x6e\x02\x02\
		\u{e3}\u{e4}\x07\x75\x02\x02\u{e4}\u{e5}\x07\x67\x02\x02\u{e5}\x40\x03\
		\x02\x02\x02\u{e6}\u{e7}\x07\x70\x02\x02\u{e7}\u{e8}\x07\x77\x02\x02\u{e8}\
		\u{e9}\x07\x6e\x02\x02\u{e9}\u{ea}\x07\x6e\x02\x02\u{ea}\x42\x03\x02\x02\
		\x02\u{eb}\u{ec}\x07\x70\x02\x02\u{ec}\u{ed}\x07\x67\x02\x02\u{ed}\u{ee}\
		\x07\x79\x02\x02\u{ee}\x44\x03\x02\x02\x02\u{ef}\u{f0}\x07\x2d\x02\x02\
		\u{f0}\x46\x03\x02\x02\x02\u{f1}\u{f2}\x07\x2c\x02\x02\u{f2}\x48\x03\x02\
		\x02\x02\u{f3}\u{f4}\x07\x31\x02\x02\u{f4}\x4a\x03\x02\x02\x02\u{f5}\u{f6}\
		\x07\x27\x02\x02\u{f6}\x4c\x03\x02\x02\x02\u{f7}\u{f8}\x07\x3e\x02\x02\
		\u{f8}\x4e\x03\x02\x02\x02\u{f9}\u{fa}\x07\x3e\x02\x02\u{fa}\u{fb}\x07\
		\x3f\x02\x02\u{fb}\x50\x03\x02\x02\x02\u{fc}\u{fd}\x07\x40\x02\x02\u{fd}\
		\x52\x03\x02\x02\x02\u{fe}\u{ff}\x07\x40\x02\x02\u{ff}\u{100}\x07\x3f\x02\
		\x02\u{100}\x54\x03\x02\x02\x02\u{101}\u{102}\x07\x3f\x02\x02\u{102}\u{103}\
		\x07\x3f\x02\x02\u{103}\x56\x03\x02\x02\x02\u{104}\u{105}\x07\x23\x02\x02\
		\u{105}\u{106}\x07\x3f\x02\x02\u{106}\x58\x03\x02\x02\x02\u{107}\u{10b}\
		\x07\x25\x02\x02\u{108}\u{10a}\x0a\x02\x02\x02\u{109}\u{108}\x03\x02\x02\
		\x02\u{10a}\u{10d}\x03\x02\x02\x02\u{10b}\u{109}\x03\x02\x02\x02\u{10b}\
		\u{10c}\x03\x02\x02\x02\u{10c}\u{118}\x03\x02\x02\x02\u{10d}\u{10b}\x03\
		\x02\x02\x02\u{10e}\u{10f}\x07\x31\x02\x02\u{10f}\u{110}\x07\x31\x02\x02\
		\u{110}\u{114}\x03\x02\x02\x02\u{111}\u{113}\x0a\x02\x02\x02\u{112}\u{111}\
		\x03\x02\x02\x02\u{113}\u{116}\x03\x02\x02\x02\u{114}\u{112}\x03\x02\x02\
		\x02\u{114}\u{115}\x03\x02\x02\x02\u{115}\u{118}\x03\x02\x02\x02\u{116}\
		\u{114}\x03\x02\x02\x02\u{117}\u{107}\x03\x02\x02\x02\u{117}\u{10e}\x03\
		\x02\x02\x02\u{118}\u{119}\x03\x02\x02\x02\u{119}\u{11a}\x08\x2d\x02\x02\
		\u{11a}\x5a\x03\x02\x02\x02\u{11b}\u{11c}\x07\x31\x02\x02\u{11c}\u{11d}\
		\x07\x2c\x02\x02\u{11d}\u{121}\x03\x02\x02\x02\u{11e}\u{120}\x0b\x02\x02\
		\x02\u{11f}\u{11e}\x03\x02\x02\x02\u{120}\u{123}\x03\x02\x02\x02\u{121}\
		\u{122}\x03\x02\x02\x02\u{121}\u{11f}\x03\x02\x02\x02\u{122}\u{124}\x03\
		\x02\x02\x02\u{123}\u{121}\x03\x02\x02\x02\u{124}\u{125}\x07\x2c\x02\x02\
		\u{125}\u{126}\x07\x31\x02\x02\u{126}\u{127}\x03\x02\x02\x02\u{127}\u{128}\
		\x08\x2e\x02\x02\u{128}\x5c\x03\x02\x02\x02\u{129}\u{12c}\x05\x5f\x30\x02\
		\u{12a}\u{12c}\x05\x61\x31\x02\u{12b}\u{129}\x03\x02\x02\x02\u{12b}\u{12a}\
		\x03\x02\x02\x02\u{12c}\x5e\x03\x02\x02\x02\u{12d}\u{12e}\x09\x03\x02\x02\
		\u{12e}\x60\x03\x02\x02\x02\u{12f}\u{130}\x09\x04\x02\x02\u{130}\x62\x03\
		\x02\x02\x02\u{131}\u{132}\x09\x05\x02\x02\u{132}\x64\x03\x02\x02\x02\u{133}\
		\u{135}\x05\x63\x32\x02\u{134}\u{133}\x03\x02\x02\x02\u{135}\u{136}\x03\
		\x02\x02\x02\u{136}\u{134}\x03\x02\x02\x02\u{136}\u{137}\x03\x02\x02\x02\
		\u{137}\x66\x03\x02\x02\x02\u{138}\u{13b}\x05\x5d\x2f\x02\u{139}\u{13b}\
		\x07\x61\x02\x02\u{13a}\u{138}\x03\x02\x02\x02\u{13a}\u{139}\x03\x02\x02\
		\x02\u{13b}\x68\x03\x02\x02\x02\u{13c}\u{141}\x05\x67\x34\x02\u{13d}\u{140}\
		\x05\x67\x34\x02\u{13e}\u{140}\x05\x63\x32\x02\u{13f}\u{13d}\x03\x02\x02\
		\x02\u{13f}\u{13e}\x03\x02\x02\x02\u{140}\u{143}\x03\x02\x02\x02\u{141}\
		\u{13f}\x03\x02\x02\x02\u{141}\u{142}\x03\x02\x02\x02\u{142}\x6a\x03\x02\
		\x02\x02\u{143}\u{141}\x03\x02\x02\x02\u{144}\u{146}\x09\x06\x02\x02\u{145}\
		\u{144}\x03\x02\x02\x02\u{146}\u{147}\x03\x02\x02\x02\u{147}\u{145}\x03\
		\x02\x02\x02\u{147}\u{148}\x03\x02\x02\x02\u{148}\u{149}\x03\x02\x02\x02\
		\u{149}\u{14a}\x08\x36\x02\x02\u{14a}\x6c\x03\x02\x02\x02\u{14b}\u{14d}\
		\x07\x24\x02\x02\u{14c}\u{14e}\x05\x6f\x38\x02\u{14d}\u{14c}\x03\x02\x02\
		\x02\u{14d}\u{14e}\x03\x02\x02\x02\u{14e}\u{14f}\x03\x02\x02\x02\u{14f}\
		\u{150}\x07\x24\x02\x02\u{150}\x6e\x03\x02\x02\x02\u{151}\u{153}\x05\x71\
		\x39\x02\u{152}\u{151}\x03\x02\x02\x02\u{153}\u{154}\x03\x02\x02\x02\u{154}\
		\u{152}\x03\x02\x02\x02\u{154}\u{155}\x03\x02\x02\x02\u{155}\x70\x03\x02\
		\x02\x02\u{156}\u{15a}\x0a\x07\x02\x02\u{157}\u{158}\x07\x5e\x02\x02\u{158}\
		\u{15a}\x09\x08\x02\x02\u{159}\u{156}\x03\x02\x02\x02\u{159}\u{157}\x03\
		\x02\x02\x02\u{15a}\x72\x03\x02\x02\x02\x10\x02\u{10b}\u{114}\u{117}\u{121}\
		\u{12b}\u{136}\u{13a}\u{13f}\u{141}\u{147}\u{14d}\u{154}\u{159}\x03\x08\
		\x02\x02";
